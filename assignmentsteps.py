# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-gk1zP5GqRICYuCvmqtdgPjD_VZkiOYR
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
from scipy.io import loadmat
from skimage import io


"""Step (1) : Reading the data. 

"""

def loadMatData(path):
  datavar = loadmat(path)
  return datavar['X'], datavar['y']

train_X, train_y = loadMatData('/content/drive/MyDrive/Colab Notebooks/Assignment 5 SML/train_32x32.mat')

test_X , test_y = loadMatData('/content/drive/MyDrive/Colab Notebooks/Assignment 5 SML/test_32x32.mat')


print("Shape of the training data", train_X.shape , train_y.shape )
print("Shape of the testting data", test_X.shape, test_y.shape)

"""Step (2) : Normalizing those just images i.e., only X values. Where as y is labels.

Min Max Normalization
"""

train_X = train_X/255.0
test_X = test_X/255.0

"""Applying one-hot vector encoding for the labels i.e., y"""

from sklearn.preprocessing import OneHotEncoder


encoder_Object = OneHotEncoder().fit(train_y.reshape(-1, 1))
#made an encoder object

#now we can transform all the label values 
train_y = encoder_Object.transform(train_y.reshape(-1, 1)).toarray()
test_y = encoder_Object.transform(test_y.reshape(-1, 1)).toarray()

print("Training set y labels", train_y.shape)
print("Testing set y labels ", test_y.shape)

import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

"""Step (3) : Building the model as per the Given Architecture

"""

modelObject = models.Sequential()

modelObject.add(layers.Conv2D(64, (5, 5), activation='relu', input_shape=(32, 32, 3), padding = "same"))
modelObject.add(layers.MaxPooling2D((2, 2), strides=(2,2)))
modelObject.add(layers.Conv2D(64, (5, 5), activation='relu', padding="same"))
modelObject.add(layers.MaxPooling2D((2, 2), strides=(2,2)))
modelObject.add(layers.Conv2D(128, (5, 5), activation='relu', padding="same"))

modelObject.add(layers.Flatten())
modelObject.add(layers.Dense(3072, activation='relu'))
modelObject.add(layers.Dense(2048, activation='relu'))
modelObject.add(layers.Dense(10, activation='softmax'))

"""This is the summary of the CNN model constructed."""

modelObject.summary()

from tensorflow import keras
from tensorflow.keras import layers

sgdOptimizerObject = tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.0, nesterov=False, name="SGD")
modelObject.compile(loss='categorical_crossentropy', optimizer=sgdOptimizerObject, metrics= ["accuracy"])

"""Step (4) : Training the model using SGD optimizer."""

allHistoryData = modelObject.fit(train_X, train_y, epochs=6, validation_data=(test_X, test_y))

"""For plotting test data accuracy and training data accuracy."""

import matplotlib.pyplot as plt



plt.plot(allHistoryData.history['accuracy'], label='accuracy', marker = '*')
plt.plot(allHistoryData.history['val_accuracy'], label = 'val_accuracy', marker = 'o')

plt.xlabel('Epoch number')
plt.ylabel('Accuracy scale')
plt.title("Accuracy Plot")

plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.grid()
plt.show()

"""For plotting Learning errors and training data errors."""

plt.plot(allHistoryData.history['loss'], label='learning errors', marker = '*')
plt.plot(allHistoryData.history['val_loss'], label = 'training errors', marker = 'o')
plt.xlabel('Epoch')
plt.ylabel('Errors')
plt.title("Errors Plot")

plt.ylim([0, 2])
plt.legend(loc='upper right')
plt.grid()
plt.show()

error_testData, accuracy_testData = modelObject.evaluate(test_X,  test_y, verbose=2)